package com.neosoft.userapppocjwttoken.controller;


import com.neosoft.userapppocjwttoken.entity.UserMaster;
import com.neosoft.userapppocjwttoken.model.UserRequest;
import com.neosoft.userapppocjwttoken.model.UserResponse;
import com.neosoft.userapppocjwttoken.repo.UserMasterRepository;
import com.neosoft.userapppocjwttoken.repo.UserRepository;
import com.neosoft.userapppocjwttoken.service.IUserService;
import com.neosoft.userapppocjwttoken.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.security.Principal;
import java.util.List;

/**
 * UserController.
 *
 * @author Motilal Kumar.
 * 	version	 1.0
 *
 */
@RestController
@RequestMapping("/user")
public class UserController {

	@Autowired
	private IUserService userService;
	@Autowired
	private AuthenticationManager authenticationManager;
	@Autowired
	private JwtUtil jwtUtil;
	@Autowired
	private UserMasterRepository userMasterRepository;

	@Autowired
	private UserRepository userRepository;


	//1. Save User details .
	/**
	 * Save User details .
	 *
	 * @param userMaster
	 * @return
	 *
	 */
	@PostMapping("/save")
	public ResponseEntity<?> saveUserData(@Valid  @RequestBody UserMaster userMaster){
		if(userMasterRepository.existsByEmailId(userMaster.getEmailId()))
		{
			String body = "Email ' "+userMaster.getEmailId()+" ' is  already  exists! Please try another.";
			return new ResponseEntity<>(body, HttpStatus.BAD_REQUEST);
		}
		UserMaster userMasterData  = userService.saveUserData(userMaster);
		return new ResponseEntity<>("User Data Saved Successfully!", HttpStatus.OK);
	}

	//2. Validate User credentials and generate the token.

	/**
	 * Validate User credentials and generate the token.
	 *
	 * @param userRequest
	 * @return
	 * @throws Exception
	 *
	 */
	@PostMapping("/login")
	public ResponseEntity<UserResponse>  loginUser(@Valid @RequestBody UserRequest userRequest) throws Exception {

		try {
		authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(
						userRequest.getUsername(),
						userRequest.getPassword()
				));

		} catch (Exception e) {
			throw new Exception("User credentials is  mandatory!");
		}
		String token = jwtUtil.generateToken(userRequest.getUsername());
		return ResponseEntity.ok(
				new UserResponse(token, "Success!  Generated by NeoSoft-Moti"));
	}

	private void authenticate(String username, String password) throws Exception {
		try {
			authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
		} catch (DisabledException e) {
			throw new Exception("USER_DISABLED", e);
		} catch (BadCredentialsException e) {
			throw new Exception("INVALID_CREDENTIALS", e);
		}
	}


	//3. Fetch User By userMasterId .
	/**
	 *  Fetch User By userMasterId .
	 *
	 * @param userMasterId
	 * @return
	 *
	 */
	@GetMapping("/get/{userMasterId}")
	public UserMaster fetchUserById(@PathVariable("userMasterId") int userMasterId){
		return userService.findUserById(userMasterId);
	}

	//4. Fetch User By department .
	/**
	 * Fetch User By department .
	 *
	 * @param department
	 * @return
	 *
	 */
	@GetMapping("/fetch/{department}")
	public List<UserMaster> fetchUser(@PathVariable("department") String department){
		return userService.findUserByDepartment(department);
	}

	//5. Search User By query .
	/**
	 * Search User By query .
	 *
	 * @param query
	 * @return
	 *
	 */
	@GetMapping("/search")
	public ResponseEntity<List<UserMaster>> searchUserMasterData(@RequestParam("query") String query){
		return ResponseEntity.ok(userService.searchUserMaster(query));
	}

	//3.After login only
	@PostMapping("/welcome")
	public  ResponseEntity<String>  accessData(Principal principal){
		return ResponseEntity.ok("Hello User!" +principal.getName());
	}

	//6.Get All User Data .
	/**
	 * Get All User Data .
	 *
	 * @return
	 *
	 */
	@GetMapping("/users")
	public List<UserMaster> getAllUserData(){
		return userService.findAllUserData();
	}

	/*@GetMapping("/users")
	public ResponseEntity<?> getAllUser() {

		List<User> userList = userService.findAllUser();
		System.out.println("userList: " + userList);
		return new ResponseEntity<>(userList, userList.size() > 0 ? HttpStatus.OK : HttpStatus.NOT_FOUND);
	}*/

}
